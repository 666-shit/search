//
// Created by c1533 on 2022/9/18.
//
/**顺序查找
 * 线性查找，通常用于线性表
 * 算法思想：从头到脚挨个找
 * */
typedef struct {        //查找表的数据结构(顺序表实现)
    int *elem;      //动态数组基址(malloc申请，elem指针指向)
    int TableLen;   //表的长度
} SSTable;

//顺序查找
int Search_Seq(SSTable ST, int key) {       //key：目标关键字
    int i;
    for (i = 0; i < ST.TableLen && ST.elem[i] != key; i++);
    //查找成功，返回元素下标，失败，返回-1
    return i == ST.TableLen ? -1 : i;       //i等于动态数组长度，表示扫描完数组仍没有找到，所以查找失败
}
//时间复杂度：查找成功=(n+1)/2；查找失败=n+1   O(n)
/**顺序查找表的优化(对有序表)
 * 查找表中元素有序存放(递增/递减)
 * 当数组中的数大于/小于需要查找的数，则查找失败
 * 共有n+1中查找失败情况
 * ASL失败=n/2+n/(n+1)
 * 一个成功结点的查找长度=自身所在层数，失败结点查找长度=父节点所在层数
 *
 * 顺序查找的优化(被查概率不相等)：将概率大的放到靠前的位置
 * */
